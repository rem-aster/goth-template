// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"net/netip"
)

const changeUsername = `-- name: ChangeUsername :one
UPDATE users
SET username = $1
WHERE ip = $2
RETURNING id, ip, username, created_at
`

type ChangeUsernameParams struct {
	Username string
	Ip       *netip.Addr
}

func (q *Queries) ChangeUsername(ctx context.Context, arg ChangeUsernameParams) (User, error) {
	row := q.db.QueryRow(ctx, changeUsername, arg.Username, arg.Ip)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByIP = `-- name: GetUserByIP :one
SELECT id, ip, username, created_at
FROM users
WHERE ip = $1
`

func (q *Queries) GetUserByIP(ctx context.Context, ip *netip.Addr) (User, error) {
	row := q.db.QueryRow(ctx, getUserByIP, ip)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const newUser = `-- name: NewUser :one
INSERT INTO users (ip)
VALUES ($1)
RETURNING id, ip, username, created_at
`

func (q *Queries) NewUser(ctx context.Context, ip *netip.Addr) (User, error) {
	row := q.db.QueryRow(ctx, newUser, ip)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}
